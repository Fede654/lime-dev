#!/usr/bin/env bash
#
# Lime-Dev - Main Command Interface
# Unified entry point for all lime-dev operations including security tools, verification, and upstream management
#

set -e

SCRIPT_DIR="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)"
LIME_DEV_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
TOOLS_DIR="$LIME_DEV_ROOT/tools"
SCRIPTS_DIR="$LIME_DEV_ROOT/scripts"

print_info() {
    echo "[INFO] $1"
}

print_error() {
    echo "[ERROR] $1" >&2
}

usage() {
    cat << EOF
Lime-Dev - LibreMesh Development Environment

Usage: $0 <command> [options]

Main Commands:
    setup           Setup and configure development environment
    build           Build LibreRouterOS firmware
    rebuild [type]  3-stage development rebuild (lime-app|incremental|selective)
    rebuild-fast    Stage 2 alias: lime-app development rebuild
    dev-cycle       Complete development cycle (rebuild + deploy to QEMU)
    verify          Verify environment and platform setup
    security        Security scanning and validation tools
    upstream        Upstream contribution management
    qemu            QEMU virtualization management
    upgrade         LibreRouter v1 upgrade utility (safe-upgrade + optional firmware)
    update          Update repositories (alias for 'lime setup update')
    deps            Show dependency graph
    clean [TYPE]    Clean build artifacts
                    Types: all (default), build, downloads, outputs
    reset [OPTIONS] Reset repositories to clean state (preserves lime-app)
                    Options: --preserve-lime-app (default), --all, --dry-run
    patches         Manage custom patches for LibreMesh packages
    mesh            Deploy and manage LibreMesh mesh network configurations

Setup Commands:
    lime setup                          # Setup development environment (local repos)
    lime setup --build-remote-only      # Setup for builds only (tagged releases)
    lime setup check                    # Check status with dependency graph
    lime setup update                   # Update repositories with dependency visualization
    lime setup graph                    # Comprehensive dependency analysis
    lime setup graph --export-dot       # Export professional dependency graph

Build Commands (3 Development Stages):
    lime build                          # Stage 1: Initial full build (15-45 minutes)
    lime build --local                  # Build with local development sources
    lime build x86_64                   # Build for x86_64 (QEMU/VM/PC)
    lime build --local x86_64           # Build x86_64 with local sources
    lime build ath79_generic_multiradio # Build for ATH79 multi-radio devices
    lime build docker librerouter-v1    # Docker build 
    lime build native --download-only   # Download dependencies only
    lime build --clean                  # Clean build environment

Rebuild Commands (Development Speed Optimization):
    lime rebuild                        # Stage 2: lime-app development (3-8 minutes)
    lime rebuild lime-app               # Stage 2: lime-app development (3-8 minutes)
    lime rebuild incremental            # Stage 3: all lime-packages (5-10 minutes)
    lime rebuild incremental --multi    # Stage 3: all lime-packages multi-core (3-8 minutes)
    lime rebuild-fast                   # Alias for lime rebuild lime-app
    lime rebuild selective --package shared-state  # Specific package rebuild

Clean Commands:
    lime clean                          # Clean all build artifacts (3.2GB)
    lime clean build                    # Clean only build directory (2.3GB)
    lime clean downloads                # Clean only downloads cache (854MB)  
    lime clean outputs                  # Clean only binary outputs (4MB)
    lime reset                          # Reset repos to clean state (preserves lime-app)
    lime reset --all                    # Reset ALL repos including lime-app
    lime reset --dry-run                # Show what would be reset without doing it

Verification Commands:
    lime verify all                     # Complete environment verification
    lime verify setup                   # Basic setup verification
    lime verify platform               # Platform-specific checks
    lime verify qemu                    # QEMU environment validation

Patch Management Commands:
    lime patches list                   # List available patches
    lime patches apply                  # Apply all patches to build environment
    lime patches apply --dry-run        # Preview patch application
    lime patches --help                 # Show patch management help

Mesh Network Management:
    lime mesh list                      # List available mesh configurations
    lime mesh deploy testmesh           # Deploy TestMesh to default router
    lime mesh deploy testmesh 10.13.0.1 # Deploy to specific router
    lime mesh status testmesh           # Check mesh network status
    lime mesh verify testmesh           # Verify mesh connectivity

Security Tools:
    lime security scan                  # Full security scan
    lime security scan --quick          # Quick security check
    lime security scan repos/lime-app   # Scan specific repository

Upstream Contribution:
    lime upstream setup                 # Configure upstream remotes
    lime upstream aliases lime-app      # Show git aliases
    lime upstream prepare              # Prepare upstream PR

QEMU Management:
    lime qemu start                     # Start QEMU environment
    lime qemu stop                      # Stop QEMU environment
    lime qemu status                    # Check QEMU status
    lime qemu dev-cycle                 # Development workflow

Legacy Router Update:
    lime upgrade                       # Update safe-upgrade only (thisnode.info)
    lime upgrade firmware.bin          # Update safe-upgrade + firmware upgrade  
    lime upgrade 10.13.0.1            # Update safe-upgrade on specific IP
    lime upgrade 10.13.0.1 firmware.bin    # Complete upgrade on specific router

Development Workflow Examples:
    # Initial setup
    lime setup                         # Initial setup for development
    lime setup --build-remote-only     # Setup for CI/CD builds
    lime verify all                    # Verify complete environment
    
    # 3-Stage Development Process
    lime build --local                 # Stage 1: Initial full build (15-45 min)
    lime rebuild                       # Stage 2: lime-app development (3-8 min)
    lime rebuild incremental --multi   # Stage 3: all lime-packages multi-core (3-8 min)
    
    # Additional commands
    lime setup graph                   # Comprehensive dependency visualization  
    lime security scan --quick         # Quick security check
    lime qemu start                     # Start development QEMU
    lime upgrade                       # Update safe-upgrade only (thisnode.info)
    lime upgrade firmware.bin          # Update safe-upgrade + firmware
    lime upstream setup                # Setup upstream workflow

Directory Structure:
    scripts/                  # Core scripts
    tools/                   # Development tools
    ├── security/           # Security scanning tools
    ├── verify/             # Environment verification
    ├── upstream/           # Upstream contribution tools
    └── qemu/               # QEMU management tools
    repos/                  # Managed repositories
    configs/                # Build configurations

For more help on specific commands:
    lime <command> --help

EOF
}

# Security tools dispatcher
run_security_command() {
    local security_command="${1:-help}"
    shift || true
    
    case "$security_command" in
        scan)
            exec "$SCRIPTS_DIR/security/simple-scan.sh" "$@"
            ;;
        help|-h|--help)
            cat << 'EOF'
Security Scanning Tools

Usage: lime security <command> [options]

Commands:
    scan                Full security scan of lime-dev project
    scan --quick        Quick scan (secrets only)
    scan <path>         Scan specific directory
    scan --fail-fast    Exit with error if issues found (for CI/CD)

Examples:
    lime security scan                    # Full security scan
    lime security scan --quick            # Quick security check
    lime security scan repos/lime-app     # Scan specific repository
    lime security scan --fail-fast       # For CI/CD integration

The security scanner checks for:
    • Hardcoded API keys and secrets
    • LibreMesh default credentials
    • Dangerous code patterns
    • File permission issues
    • SSH key material
    • Insecure protocols
EOF
            ;;
        *)
            print_error "Unknown security command: $security_command"
            run_security_command "help"
            exit 1
            ;;
    esac
}

# Verification dispatcher
run_verify_command() {
    local verify_command="${1:-all}"
    shift || true
    
    case "$verify_command" in
        all)
            exec "$TOOLS_DIR/verify/setup.sh" "$@"
            ;;
        setup)
            exec "$TOOLS_DIR/verify/setup.sh" --quick "$@"
            ;;
        platform)
            exec "$TOOLS_DIR/verify/setup.sh" --platform-only "$@"
            ;;
        qemu)
            print_info "QEMU verification uses the main environment verification"
            exec "$TOOLS_DIR/verify/setup.sh" --platform-only "$@"
            ;;
        help|-h|--help)
            cat << 'EOF'
Environment Verification

Usage: lime verify <command> [options]

Commands:
    all         Complete environment verification (default)
    setup       Basic setup verification
    platform    Platform-specific checks
    qemu        QEMU environment validation

Options:
    --verbose   Enable verbose output
    --quick     Quick verification (essential checks only)

Examples:
    lime verify all
    lime verify platform --verbose
    lime verify setup --quick
EOF
            ;;
        *)
            print_error "Unknown verify command: $verify_command"
            run_verify_command "help"
            exit 1
            ;;
    esac
}

# Upstream tools dispatcher
run_upstream_command() {
    local upstream_command="${1:-help}"
    shift || true
    
    case "$upstream_command" in
        setup)
            exec "$TOOLS_DIR/upstream/setup-aliases.sh" setup "$@"
            ;;
        aliases)
            exec "$TOOLS_DIR/upstream/setup-aliases.sh" aliases "$@"
            ;;
        prepare)
            print_info "Upstream preparation:"
            print_info "1. Run: lime upstream setup <repo>"
            print_info "2. Create feature branch: git feature-start <name>" 
            print_info "3. Make changes and commit"
            print_info "4. Generate patch: git create-patch"
            print_info "5. Review changes: git review-changes"
            ;;
        help|-h|--help)
            cat << 'EOF'
Upstream Contribution Management

Usage: lime upstream <command> [options]

Commands:
    setup       Configure upstream remotes and git aliases
    aliases     Show available git aliases
    prepare     Prepare upstream contribution (WIP)

Repository options:
    lime-app, lime-packages, librerouteros, all

Examples:
    lime upstream setup all
    lime upstream aliases lime-app
    lime upstream setup lime-packages
EOF
            ;;
        *)
            print_error "Unknown upstream command: $upstream_command"
            run_upstream_command "help"
            exit 1
            ;;
    esac
}

# QEMU tools dispatcher
run_qemu_command() {
    local qemu_command="${1:-help}"
    shift || true
    
    case "$qemu_command" in
        start|stop|status|restart|deploy|console)
            # Use standalone QEMU manager (moved out of lime-app)
            if [[ -x "$LIME_DEV_ROOT/tools/qemu/qemu-manager.sh" ]]; then
                cd "$LIME_DEV_ROOT/tools/qemu"
                exec "./qemu-manager.sh" "$qemu_command" "$@"
            else
                print_error "QEMU tools not available. Run 'lime setup install' first."
                exit 1
            fi
            ;;
        dev-cycle)
            print_info "QEMU development cycle:"
            print_info "1. Start: lime qemu start"
            print_info "2. Make changes in repos/lime-app/"
            print_info "3. Deploy: cd repos/lime-app && ./dev.sh deploy"
            print_info "4. Test at: http://10.13.0.1/app/"
            print_info "5. Stop: lime qemu stop"
            ;;
        help|-h|--help)
            cat << 'EOF'
QEMU Management

Usage: lime qemu <command> [options]

Commands:
    start       Start LibreMesh QEMU environment
    stop        Stop LibreMesh QEMU environment  
    restart     Restart LibreMesh QEMU environment
    status      Check QEMU status and connectivity
    deploy      Build and deploy lime-app to QEMU
    console     Connect to QEMU console (telnet)
    dev-cycle   Development workflow (WIP)

Examples:
    lime qemu start
    lime qemu status
    lime qemu console
    lime qemu deploy
    lime qemu stop
EOF
            ;;
        *)
            print_error "Unknown QEMU command: $qemu_command"
            run_qemu_command "help"
            exit 1
            ;;
    esac
}


main() {
    local command="${1:-help}"
    
    case "$command" in
        setup)
            shift
            exec "$SCRIPT_DIR/setup.sh" "$@"
            ;;
        build)
            shift
            exec "$SCRIPT_DIR/build.sh" "$@"
            ;;
        rebuild)
            shift
            # Check if first argument is a rebuild type
            case "${1:-lime-app}" in
                lime-app|incremental|selective)
                    exec "$SCRIPT_DIR/rebuild.sh" "$@"
                    ;;
                *)
                    # Default to lime-app if no valid type provided (fastest development iteration)
                    exec "$SCRIPT_DIR/rebuild.sh" lime-app "$@"
                    ;;
            esac
            ;;
        rebuild-fast)
            shift
            exec "$SCRIPT_DIR/rebuild.sh" lime-app "$@"
            ;;
        dev-cycle)
            shift
            exec "$SCRIPT_DIR/dev-cycle.sh" "$@"
            ;;
        verify)
            shift
            run_verify_command "$@"
            ;;
        security)
            shift
            run_security_command "$@"
            ;;
        upstream)
            shift
            run_upstream_command "$@"
            ;;
        qemu)
            shift
            run_qemu_command "$@"
            ;;
        check)
            # Legacy compatibility
            exec "$SCRIPT_DIR/core/check-setup.sh"
            ;;
        update)
            # Alias for setup update
            shift
            exec "$SCRIPT_DIR/setup.sh" update "$@"
            ;;
        deps)
            exec "$SCRIPT_DIR/utils/dependency-graph.sh" ascii
            ;;
        clean)
            if [[ $# -gt 1 && "$2" =~ ^(all|build|downloads|outputs)$ ]]; then
                exec "$SCRIPT_DIR/build.sh" --clean "$2"
            else
                exec "$SCRIPT_DIR/build.sh" --clean
            fi
            ;;
        reset)
            shift
            exec "$SCRIPT_DIR/core/reset.sh" "$@"
            ;;
        patches)
            shift
            exec "$SCRIPT_DIR/utils/apply-patches.sh" "$@"
            ;;
        mesh)
            shift
            exec "$SCRIPT_DIR/utils/mesh-manager.sh" "$@"
            ;;
        upgrade)
            shift
            # Use unified upgrade script
            exec "$SCRIPT_DIR/core/upgrade-legacy-router.sh" "$@"
            ;;
        help|-h|--help)
            usage
            ;;
        "")
            usage
            ;;
        *)
            print_error "Unknown command: $command"
            echo ""
            usage
            exit 1
            ;;
    esac
}

main "$@"