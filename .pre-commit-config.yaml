# Pre-commit configuration for lime-dev
# Install with: pip install pre-commit && pre-commit install
#
# Run manually: pre-commit run --all-files
# Skip hooks: SKIP=security-scan git commit -m "message"

repos:
  # Built-in hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
        exclude: '\.patch$'
      - id: end-of-file-fixer
        exclude: '\.patch$'
      - id: check-yaml
        args: ['--unsafe']  # Allow custom YAML tags
      - id: check-json
      - id: check-merge-conflict
      - id: check-executables-have-shebangs
      - id: mixed-line-ending
        args: ['--fix=lf']

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        args: ['-e', 'SC1091']  # Allow sourcing non-existent files
        exclude: 'repos/.*'     # Skip upstream repositories

  # Security scanning (our custom script)
  - repo: local
    hooks:
      - id: security-scan
        name: Security scan (quick)
        entry: ./scripts/security/scan-secrets.sh
        args: ['--quick', '--fail-fast']
        language: system
        pass_filenames: false
        always_run: true
        stages: [commit]

      - id: no-large-files
        name: Check for large files
        entry: bash -c 'find . -type f -size +10M -not -path "./repos/*" -not -path "./.git/*" | head -10'
        language: system
        pass_filenames: false
        always_run: true

      - id: check-patches
        name: Validate patch files
        entry: bash -c 'for patch in patches/**/*.patch; do if [[ -f "$patch" ]]; then patch --dry-run -p1 < "$patch" >/dev/null || echo "Invalid patch: $patch"; fi; done'
        language: system
        pass_filenames: false
        files: '\.patch$'

# Configuration for specific file types
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [security-scan]  # Skip security scan in CI (we have GitHub Actions for that)
  submodules: false